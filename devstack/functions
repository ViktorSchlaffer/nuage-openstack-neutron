#!/bin/bash
#
# Nuage common overwrites
# ----------------------

# Save trace setting
NU_XTRACE=$(set +o | grep xtrace)
set +o xtrace


function is_neutron_ovs_base_plugin {
    return 1
}

function neutron_plugin_install_agent_packages {
   :
}

function neutron_plugin_configure_dhcp_agent {
    local conf_file=$1
    OVS_BRIDGE=${OVS_BRIDGE:-alubr0}
    iniset $conf_file DEFAULT ovs_integration_bridge $OVS_BRIDGE

}

function neutron_plugin_setup_interface_driver {
    local conf_file=$1
    OVS_BRIDGE=${OVS_BRIDGE:-alubr0}
    iniset $conf_file DEFAULT interface_driver nuagevrs
    iniset $conf_file DEFAULT ovs_integration_bridge $OVS_BRIDGE
}

function create_or_retrieve_cms {
    # If NUAGE_VSD_CMS_ID is not set, find or create a cms on VSD.
    if [[ -z "$NUAGE_VSD_CMS_ID" ]]; then
        username=$( echo "${NUAGE_VSD_SERVER_AUTH}" | cut -d ':' -f 1)

        upper_ssl=${NUAGE_VSD_SERVER_SSL^^}
        if [[ "$upper_ssl" = "TRUE" ]]; then
            base_url="https://"
        else
            base_url="http://"
        fi
        base_url+="$NUAGE_VSD_SERVERS"
        base_url+="$NUAGE_VSD_BASE_URI"
        url="$base_url$NUAGE_VSD_AUTH_RESOURCE"

        echo "Connecting to VSD"
        result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$NUAGE_VSD_SERVER_AUTH" "$url")
        regex='"APIKey":.?"([^"]*)"'
        [[ ${result} =~ $regex ]]
        apikey="${BASH_REMATCH[1]}"
        echo "Connected"

        if [[ -n "$NUAGE_VSD_CMS_NAME" ]]; then
            name="$NUAGE_VSD_CMS_NAME"
        else
            eth0_file="/sys/class/net/eth0/address"
            if [[ -f "$eth0_file" ]]; then
                mac=`cat ${eth0_file}`
                name="OPENSTACK_$mac"
            else
                name="OPENSTACK"
            fi
        fi
        url="$base_url/cms"

        echo "Trying to find CMS with name: $name"
        result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url")
        regex=".*(\{[^\}]*\"name\":.?\"$name\"[^\}]*\}).*"
        if [[ ${result} =~ $regex ]]; then
            cms="${BASH_REMATCH[1]}"
            regex='"ID":.?"([^"]*)"'
            if [[ ${cms} =~ $regex ]]; then
                NUAGE_VSD_CMS_ID="${BASH_REMATCH[1]}"
            fi
        fi

        if [[ ${NUAGE_VSD_CMS_ID} ]]; then
            echo "Found CMS: $NUAGE_VSD_CMS_ID"
        else
            echo "Could not find existing CMS with name: $name"
            echo "Creating CMS"
            result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$name\"}")
            regex='"ID":.?"([^"]*)"'
            [[ ${result} =~ $regex ]]
            NUAGE_VSD_CMS_ID="${BASH_REMATCH[1]}"
            echo "Created CMS with id: $NUAGE_VSD_CMS_ID"
        fi
    fi
    eval "$1=${NUAGE_VSD_CMS_ID}"
}

function configure_octavia_nuage {
    if is_service_enabled octavia; then
        echo "configuring Octavia Healthmanager port"
        id_and_mac=$(openstack port show octavia-health-manager-standalone-listen-port| awk '/ id | mac_address / {print $4}')
        id_and_mac=($id_and_mac)
        MGMT_PORT_ID=${id_and_mac[0]}
        MGMT_PORT_MAC=${id_and_mac[1]}
        echo "plugging Octavia healthmanager port"
        $(python $DIR_NUAGE/devstack/lib/nuage_interface.py --mac $MGMT_PORT_MAC --port_id $MGMT_PORT_ID)
        echo "obtaining IP for Octavia Healthmanager port"
        $(sudo dhclient -r)
        $(sudo dhclient o-hm0)
        $(sudo service devstack@o-hm restart)
    fi
}

function stop_octavia_nuage {
    if is_service_enabled octavia; then
        echo "Unplugging Octavia healthmanager port"
        id_and_mac=$(timeout 20 openstack port show octavia-health-manager-standalone-listen-port| awk '/ id | mac_address / {print $4}')
        id_and_mac=($id_and_mac)
        MGMT_PORT_ID=${id_and_mac[0]}
        $(python $DIR_NUAGE/devstack/lib/nuage_interface.py --unplug True --port_id $MGMT_PORT_ID)

    fi

}


# Restore xtrace
$NU_XTRACE

